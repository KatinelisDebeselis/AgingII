configfile: "config.yaml"

rule fastqc:
    input: expand("{data}{sample}.fastq.gz", data=config["data"], sample=config["sample"])
    output: expand("{qc_reports}{sample}_fastqc.html", qc_reports=config["qc_reports"], sample=config["sample"])
    shell: 
        "fastqc {input} -o {output}"

rule trim_reads:
    input:
        fq1 = "{data}{sample}_1.fastq.gz",
        fq2 = "{data}{sample}_2.fastq.gz"
    output:
        fq1_trimmed = "{trimmed_data}{sample}_1_trimmed.fastq.gz",
        fq2_trimmed = "{trimmed_data}{sample}_2_trimmed.fastq.gz",
        fq1_unpaired = "{trimmed_data}{sample}_1_unpaired.fastq.gz",
        fq2_unpaired = "{trimmed_data}{sample}_2_unpaired.fastq.gz"
    params:
        adapters = "TruSeq3-PE.fa",
        quality = 25,
        minlen = 20
    threads: 4
    shell:
        """
        trimmomatic PE -threads {threads} \
        {input.fq1} {input.fq2} \
        {output.fq1_trimmed} {output.fq1_unpaired} \
        {output.fq2_trimmed} {output.fq2_unpaired} \
        ILLUMINACLIP:{params.adapters}:2:30:10 \
        LEADING:{params.quality} TRAILING:{params.quality} \
        SLIDINGWINDOW:4:{params.quality} MINLEN:{params.minlen}
        """

rule align_reads:
    input:
        fq1 = "{trimmed_data}{sample}_1_trimmed.fastq.gz",
        fq2 = "{trimmed_data}{sample}_2_trimmed.fastq.gz"
    output:
        "{aligned_data}{sample}.bam"
    params:
        star_index = config["star_index"]
    threads: 4
    shell:
        """
        STAR --runThreadN {threads} \
             --genomeDir {params.star_index} \
             --readFilesIn {input.fq1} {input.fq2} \
             --readFilesCommand zcat \
             --outSAMtype BAM SortedByCoordinate \
             --outFileNamePrefix {wildcards.sample}.
        mv {wildcards.sample}.Aligned.sortedByCoord.out.bam {output}
        """
rule count_matrix:
    input: expand("{aligned_data}{sample}.bam", aligned_data=config["aligned_data"], sample=config["sample"])
    output: "{results}/count_matrix.txt"
    shell:
        "featureCounts -a {config[annotation_gtf]} -o {output} {input}"